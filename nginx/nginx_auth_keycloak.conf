access_by_lua_block {
    local cjson = require("cjson.safe")

    local opts = {
        redirect_uri = os.getenv("KEYCLOAK_AUTH_REDIRECT_URI"),
        discovery = os.getenv("KEYCLOAK_AUTH_URL") .. "/realms/" .. os.getenv("KEYCLOAK_AUTH_REALM") .. "/.well-known/openid-configuration",
        client_id = os.getenv("KEYCLOAK_CLIENT_ID"),
        client_secret = os.getenv("KEYCLOAK_CLIENT_SECRET"),
        session_contents = {id_token=true, access_token=true},
        ssl_verify = "no",
        accept_none_alg = false,
        renew_access_token_on_expiry = true,
        accept_unsupported_alg = false,
        revoke_tokens_on_logout = true
    }

    local res, err = require("resty.openidc").authenticate(opts)

    if err then
      ngx.log(ngx.ERR, "Error during authentication: " .. err)
      ngx.status = 401
      ngx.exit(ngx.HTTP_UNAUTHORIZED)
    end

    local username = res.id_token.preferred_username or ""
    local roles = (res.id_token.realm_access and res.id_token.realm_access.roles) or {}
    local groups = res.id_token.groups or {}
    if next(groups) ~= nil then
        ngx.log(ngx.INFO, "User " .. username .. " has groups " .. cjson.encode(groups))
    end
    if next(roles) ~= nil then
        ngx.log(ngx.INFO, "User " .. username .. " has roles " .. cjson.encode(roles))
    end

    local required_groups_str = os.getenv("NGINX_REQUIRE_GROUP")
    if required_groups_str and required_groups_str ~= "" then
        local required_groups = {}
        for group in required_groups_str:gmatch("[^,]+") do
            table.insert(required_groups, group)
        end
        local user_groups = {}
        for _, group in ipairs(groups) do
            user_groups[group] = true
        end
        for _, required_group in ipairs(required_groups) do
            if not user_groups[required_group] then
                ngx.log(ngx.ERR, "User " .. username .. " does not belong to required group: " .. required_group)
                ngx.status = 403
                ngx.exit(ngx.HTTP_FORBIDDEN)
            end
        end
    end
    local required_roles_str = os.getenv("NGINX_REQUIRE_ROLE")
    if required_roles_str and required_roles_str ~= "" then
        local required_roles = {}
        for role in required_roles_str:gmatch("[^,]+") do
            table.insert(required_roles, role)
        end
        local user_roles = {}
        for _, role in ipairs(roles) do
            user_roles[role] = true
        end
        for _, required_role in ipairs(required_roles) do
            if not user_roles[required_role] then
                ngx.log(ngx.ERR, "User " .. username .. " does not have required role: " .. required_role)
                ngx.status = 403
                ngx.exit(ngx.HTTP_FORBIDDEN)
            end
        end
    end

    ngx.req.set_header("X-Remote-User", username)
    ngx.req.set_header("X-Forwarded-User", username)
    ngx.req.set_header("X-Forwarded-Roles", table.concat(roles, ","))
    ngx.req.set_header("X-Forwarded-Groups", table.concat(groups, ","))
}
